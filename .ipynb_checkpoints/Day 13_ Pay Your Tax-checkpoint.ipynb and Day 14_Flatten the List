{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5cc4c8d6-04be-4c2f-8cb7-996fa41404e4",
   "metadata": {},
   "source": [
    "Day 13: Pay Your Tax\n",
    "Write a function called your_vat. The function takes no parameter. The function asks the user to input the price of an\n",
    "item and VAT (vat should be a percentage). The function should return the price of the item plus VAT. If the price is 220 and,\n",
    "VAT is 15% your code should return a vat inclusive price of 253. Make sure that your code can handle ValueError. Ensure the\n",
    "code runs until valid numbers are entered. (hint: Your code should include a while loop)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "b5f3eaaf-0290-4ae2-b7a9-b62fa8e72444",
   "metadata": {},
   "outputs": [],
   "source": [
    "def your_vat():\n",
    "    while True:\n",
    "        try:\n",
    "            price = int(input('Enter the price:'))\n",
    "            VAT = int(input('Enter VAT:'))\n",
    "        except ValueError:\n",
    "            print('VAT and price should be a integer')\n",
    "        else:    \n",
    "            return  price +  price*VAT*1/100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "62b81dd9-b4a3-487b-a963-23d1511a46d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the price: e\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "VAT and price should be a integer\n"
     ]
    }
   ],
   "source": [
    "your_vat()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "id": "3c45df28-7012-4615-b921-f3af4aa7be48",
   "metadata": {},
   "outputs": [],
   "source": [
    "def your_vat():\n",
    "    while True:\n",
    "        price = int(input('Enter the price:'))\n",
    "        VAT = input('Enter VAT:')\n",
    "        if VAT[-1] != '%': #or price is not int\n",
    "            print('VAT should be a percentage')\n",
    "        elif VAT[-1] == '%':    \n",
    "            return  price + price*int(VAT[0:-1])*1/100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "336f5eec-dd31-4ea8-9a4c-ea0990d9017f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the price: 23\n",
      "Enter VAT: 3%\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "VAT should be a percentage\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the price: 34\n",
      "Enter VAT: 3%\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "VAT should be a percentage\n"
     ]
    }
   ],
   "source": [
    "your_vat()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "7aecb2bf-1968-4869-b869-6ffe09dbaf84",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 184,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x ='44%'\n",
    "type(x[0:-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "8534f87a-bef9-4e73-8d19-4546472853ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(x[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee3b9590-4370-4ef9-b627-2bec7e28bc06",
   "metadata": {},
   "source": [
    "Extra Challenge: Pyramid of Snakes\n",
    "Write a function called Python_snakes that takes a number as an argument and creates the following shape, using the\n",
    "number‚Äôs range: (hint: Use the loops and emoji library. If you pass 7 as argument, your code should print the following:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "384e16a9-3aa9-4a44-b1f6-8661401d42b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install emoji"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "b0dcc46e-aea8-419d-9bf4-a00b80693e91",
   "metadata": {},
   "outputs": [],
   "source": [
    "from emoji import emojize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "766a4283-ea91-461d-b572-11d98a382c9a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "üòç\n"
     ]
    }
   ],
   "source": [
    "print(\"\\U0001F60D\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "670e432e-29ad-45cb-b618-6c600575e811",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "üòâ\n"
     ]
    }
   ],
   "source": [
    "print('\\N{winking face}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "916e5a9c-3dd7-4799-a152-e7ab6dd351fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def Python_snakes(n: int):\n",
    "# the loop to determine the number of rows of the pyramid\n",
    "    for i in range(0, n):\n",
    "        # The loop that determines number of columns\n",
    "        for j in range(n, i, -1):\n",
    "            # print space between the snake signs\n",
    "            print(end=\" \")\n",
    "        for k in range(0, i):\n",
    "            # printing the snake emoji\n",
    "            print(emojize(':snake:'), end=\" \")\n",
    "        print(\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "9925fd66-f08d-474d-bc0b-a4f48cb90801",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     \n",
      "\n",
      "    üêç \n",
      "\n",
      "   üêç üêç \n",
      "\n",
      "  üêç üêç üêç \n",
      "\n",
      " üêç üêç üêç üêç \n",
      "\n"
     ]
    }
   ],
   "source": [
    "Python_snakes(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8198602a-2fac-43c8-bebb-a00799025e87",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a540cd45-9c52-4124-a31d-de638132cade",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "curs_python_env",
   "language": "python",
   "name": "curs_python_env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
